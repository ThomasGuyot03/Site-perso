{"ast":null,"code":"const gridSize = 50; // Taille des cellules de la grille en pixels\nconst totalPoints = 15; // Total des points animés\n\nexport default {\n  __name: 'App',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n\n    // Paramètres de la grille\n    const rows = Math.ceil(window.innerHeight / gridSize); // Nombre de lignes\n    const cols = Math.ceil(window.innerWidth / gridSize); // Nombre de colonnes\n\n    // Carrés animés\n    const squares = Array.from({\n      length: 10\n    }, (_, id) => ({\n      id,\n      row: Math.floor(Math.random() * rows),\n      // Ligne aléatoire\n      col: Math.floor(Math.random() * cols),\n      // Colonne aléatoire\n      delay: Math.random() * 10 // Délai aléatoire entre 0 et 10 secondes\n    }));\n\n    // Points animés depuis les bords\n    const points = Array.from({\n      length: totalPoints\n    }, (_, id) => {\n      const side = ['top', 'right', 'bottom', 'left'][Math.floor(Math.random() * 4)]; // Bord aléatoire\n      const speed = 8 + Math.random() * 5; // Vitesse lente, entre 8 et 13 secondes\n      const delay = Math.random() * 5; // Délai aléatoire entre 0 et 5 secondes\n\n      let startTop = 0;\n      let startLeft = 0;\n      if (side === 'top') {\n        startTop = 0;\n        startLeft = Math.random() * window.innerWidth; // Aléatoire en largeur\n      } else if (side === 'right') {\n        startTop = Math.random() * window.innerHeight; // Aléatoire en hauteur\n        startLeft = window.innerWidth; // Bord droit\n      } else if (side === 'bottom') {\n        startTop = window.innerHeight; // Bord inférieur\n        startLeft = Math.random() * window.innerWidth; // Aléatoire en largeur\n      } else if (side === 'left') {\n        startTop = Math.random() * window.innerHeight; // Aléatoire en hauteur\n        startLeft = 0; // Bord gauche\n      }\n      return {\n        id,\n        direction: side,\n        // Direction du mouvement\n        startTop,\n        startLeft,\n        speed,\n        delay\n      };\n    });\n    const __returned__ = {\n      gridSize,\n      rows,\n      cols,\n      squares,\n      totalPoints,\n      points\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["gridSize","totalPoints","rows","Math","ceil","window","innerHeight","cols","innerWidth","squares","Array","from","length","_","id","row","floor","random","col","delay","points","side","speed","startTop","startLeft","direction"],"sources":["C:/Users/thoma/Desktop/Site pro/mon-site/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <router-view />\n    <!-- Grille animée avec des carrés alignés -->\n    <div class=\"animated-squares\">\n      <div\n        v-for=\"square in squares\"\n        :key=\"'square-' + square.id\"\n        class=\"square\"\n        :style=\"{\n          top: `${square.row * 50}px`,\n          left: `${square.col * 50}px`,\n          animationDelay: `${square.delay}s`\n        }\"\n      ></div>\n    </div>\n\n    <!-- Points animés depuis les bords -->\n    <div class=\"moving-points\">\n      <div\n        v-for=\"point in points\"\n        :key=\"'point-' + point.id\"\n        class=\"point\"\n        :class=\"point.direction\" \n        :style=\"{\n          top: `${point.startTop}px`,\n          left: `${point.startLeft}px`,\n          animationDuration: `${point.speed}s`,\n          animationDelay: `${point.delay}s`\n        }\"\n      ></div>\n    </div>\n  </div>\n</template>\n\n<script setup>\n// Paramètres de la grille\nconst gridSize = 50; // Taille des cellules de la grille en pixels\nconst rows = Math.ceil(window.innerHeight / gridSize); // Nombre de lignes\nconst cols = Math.ceil(window.innerWidth / gridSize); // Nombre de colonnes\n\n// Carrés animés\nconst squares = Array.from({ length: 10 }, (_, id) => ({\n  id,\n  row: Math.floor(Math.random() * rows), // Ligne aléatoire\n  col: Math.floor(Math.random() * cols), // Colonne aléatoire\n  delay: Math.random() * 10, // Délai aléatoire entre 0 et 10 secondes\n}));\n\n// Points animés depuis les bords\nconst totalPoints = 15; // Total des points animés\nconst points = Array.from({ length: totalPoints }, (_, id) => {\n  const side = ['top', 'right', 'bottom', 'left'][Math.floor(Math.random() * 4)]; // Bord aléatoire\n  const speed = 8 + Math.random() * 5; // Vitesse lente, entre 8 et 13 secondes\n  const delay = Math.random() * 5; // Délai aléatoire entre 0 et 5 secondes\n\n  let startTop = 0;\n  let startLeft = 0;\n\n  if (side === 'top') {\n    startTop = 0;\n    startLeft = Math.random() * window.innerWidth; // Aléatoire en largeur\n  } else if (side === 'right') {\n    startTop = Math.random() * window.innerHeight; // Aléatoire en hauteur\n    startLeft = window.innerWidth; // Bord droit\n  } else if (side === 'bottom') {\n    startTop = window.innerHeight; // Bord inférieur\n    startLeft = Math.random() * window.innerWidth; // Aléatoire en largeur\n  } else if (side === 'left') {\n    startTop = Math.random() * window.innerHeight; // Aléatoire en hauteur\n    startLeft = 0; // Bord gauche\n  }\n\n  return {\n    id,\n    direction: side, // Direction du mouvement\n    startTop,\n    startLeft,\n    speed,\n    delay,\n  };\n});\n</script>\n\n<style>\n/* Arrière-plan principal */\nbody {\n  margin: 0;\n  background-color: #2b2b2b; /* Fond noir */\n  color: #fff; /* Texte blanc */\n  font-family: Arial, sans-serif;\n  overflow-x: hidden;\n}\n\n#app {\n  position: relative;\n  min-height: 100vh;\n  background-color: #2c2c2c; /* Couleur de fond principale */\n  background-image: \n    linear-gradient(rgba(255, 255, 255, 0.05) 1px, transparent 1px),\n    linear-gradient(to right, rgba(255, 255, 255, 0.05) 1px, transparent 1px);\n  background-size: 50px 50px; /* Taille de la grille */\n}\n\n/* Conteneur pour les carrés animés */\n.animated-squares {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none; /* Empêche les clics sur les carrés */\n}\n\n/* Style des carrés */\n.square {\n  position: absolute;\n  width: 50px;\n  height: 50px;\n  background-color: #2c2c2c; /* Fond initial identique à la grille */\n  animation: fadeInOut 5s infinite; /* Animation */\n  animation-timing-function: ease-in-out; /* Transitions douces */\n}\n\n/* Animation des carrés */\n@keyframes fadeInOut {\n  0% {\n    background-color: #2c2c2c; /* Même couleur que la grille */\n  }\n  50% {\n    background-color: rgba(80, 80, 80, 0.6); /* Gris légèrement plus clair */\n  }\n  100% {\n    background-color: #2c2c2c; /* Retour à la couleur initiale */\n  }\n}\n\n/* Conteneur pour les points animés */\n.moving-points {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none; /* Empêche les clics sur les points */\n}\n\n/* Style des points */\n.point {\n  position: absolute;\n  width: 10px;\n  height: 10px;\n  background-color: #ff5722; /* Couleur des points */\n  border-radius: 50%; /* Forme circulaire */\n}\n\n/* Animations pour les différentes directions */\n.point.top {\n  animation: moveDown linear infinite;\n}\n\n.point.right {\n  animation: moveLeft linear infinite;\n}\n\n.point.bottom {\n  animation: moveUp linear infinite;\n}\n\n.point.left {\n  animation: moveRight linear infinite;\n}\n\n/* Mouvements */\n@keyframes moveDown {\n  from {\n    top: 0;\n  }\n  to {\n    top: 100vh;\n  }\n}\n\n@keyframes moveLeft {\n  from {\n    left: 100vw;\n  }\n  to {\n    left: 0;\n  }\n}\n\n@keyframes moveUp {\n  from {\n    top: 100vh;\n  }\n  to {\n    top: 0;\n  }\n}\n\n@keyframes moveRight {\n  from {\n    left: 0;\n  }\n  to {\n    left: 100vw;\n  }\n}\n</style>\n"],"mappings":"AAqCA,MAAMA,QAAQ,GAAG,EAAE,CAAC,CAAC;AAarB,MAAMC,WAAW,GAAG,EAAE,CAAC,CAAC;;;;;;;;;IAdxB;IAEA,MAAMC,IAAI,GAAGC,IAAI,CAACC,IAAI,CAACC,MAAM,CAACC,WAAW,GAAGN,QAAQ,CAAC,CAAC,CAAC;IACvD,MAAMO,IAAI,GAAGJ,IAAI,CAACC,IAAI,CAACC,MAAM,CAACG,UAAU,GAAGR,QAAQ,CAAC,CAAC,CAAC;;IAEtD;IACA,MAAMS,OAAO,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,EAAE,MAAM;MACrDA,EAAE;MACFC,GAAG,EAAEZ,IAAI,CAACa,KAAK,CAACb,IAAI,CAACc,MAAM,CAAC,CAAC,GAAGf,IAAI,CAAC;MAAE;MACvCgB,GAAG,EAAEf,IAAI,CAACa,KAAK,CAACb,IAAI,CAACc,MAAM,CAAC,CAAC,GAAGV,IAAI,CAAC;MAAE;MACvCY,KAAK,EAAEhB,IAAI,CAACc,MAAM,CAAC,CAAC,GAAG,EAAE,CAAE;IAC7B,CAAC,CAAC,CAAC;;IAEH;IAEA,MAAMG,MAAM,GAAGV,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEX;IAAY,CAAC,EAAE,CAACY,CAAC,EAAEC,EAAE,KAAK;MAC5D,MAAMO,IAAI,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAClB,IAAI,CAACa,KAAK,CAACb,IAAI,CAACc,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAChF,MAAMK,KAAK,GAAG,CAAC,GAAGnB,IAAI,CAACc,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MACrC,MAAME,KAAK,GAAGhB,IAAI,CAACc,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;;MAEjC,IAAIM,QAAQ,GAAG,CAAC;MAChB,IAAIC,SAAS,GAAG,CAAC;MAEjB,IAAIH,IAAI,KAAK,KAAK,EAAE;QAClBE,QAAQ,GAAG,CAAC;QACZC,SAAS,GAAGrB,IAAI,CAACc,MAAM,CAAC,CAAC,GAAGZ,MAAM,CAACG,UAAU,CAAC,CAAC;MACjD,CAAC,MAAM,IAAIa,IAAI,KAAK,OAAO,EAAE;QAC3BE,QAAQ,GAAGpB,IAAI,CAACc,MAAM,CAAC,CAAC,GAAGZ,MAAM,CAACC,WAAW,CAAC,CAAC;QAC/CkB,SAAS,GAAGnB,MAAM,CAACG,UAAU,CAAC,CAAC;MACjC,CAAC,MAAM,IAAIa,IAAI,KAAK,QAAQ,EAAE;QAC5BE,QAAQ,GAAGlB,MAAM,CAACC,WAAW,CAAC,CAAC;QAC/BkB,SAAS,GAAGrB,IAAI,CAACc,MAAM,CAAC,CAAC,GAAGZ,MAAM,CAACG,UAAU,CAAC,CAAC;MACjD,CAAC,MAAM,IAAIa,IAAI,KAAK,MAAM,EAAE;QAC1BE,QAAQ,GAAGpB,IAAI,CAACc,MAAM,CAAC,CAAC,GAAGZ,MAAM,CAACC,WAAW,CAAC,CAAC;QAC/CkB,SAAS,GAAG,CAAC,CAAC,CAAC;MACjB;MAEA,OAAO;QACLV,EAAE;QACFW,SAAS,EAAEJ,IAAI;QAAE;QACjBE,QAAQ;QACRC,SAAS;QACTF,KAAK;QACLH;MACF,CAAC;IACH,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}