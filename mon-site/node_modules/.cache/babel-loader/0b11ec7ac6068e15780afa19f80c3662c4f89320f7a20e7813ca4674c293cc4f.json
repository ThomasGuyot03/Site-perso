{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  class: \"animated-squares\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_router_view), _createCommentVNode(\" Grille animée avec des carrés alignés \"), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.squares, square => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: 'square-' + square.id,\n      class: \"square\",\n      style: _normalizeStyle({\n        top: `${square.row * 50}px`,\n        left: `${square.col * 50}px`,\n        animationDelay: `${square.delay}s`,\n        filter: $setup.getSquareColorFilter(square)\n      })\n    }, null, 4 /* STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["id","class","_createElementBlock","_hoisted_1","_createVNode","_component_router_view","_createCommentVNode","_createElementVNode","_hoisted_2","_Fragment","_renderList","$setup","squares","square","key","style","_normalizeStyle","row","col","delay","getSquareColorFilter"],"sources":["C:\\Users\\thoma\\Desktop\\Site pro\\mon-site\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <router-view />\n\n    <!-- Grille animée avec des carrés alignés -->\n    <div class=\"animated-squares\">\n      <div\n        v-for=\"square in squares\"\n        :key=\"'square-' + square.id\"\n        class=\"square\"\n        :style=\"{\n          top: `${square.row * 50}px`,\n          left: `${square.col * 50}px`,\n          animationDelay: `${square.delay}s`,\n          filter: getSquareColorFilter(square)\n        }\"\n      ></div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nconst gridSize = 50; // Taille des cellules de la grille en pixels\nconst rows = Math.ceil(window.innerHeight / gridSize); // Nombre de lignes\nconst cols = Math.ceil(window.innerWidth / gridSize); // Nombre de colonnes\n\n// Calculer la distance au centre de l'écran pour appliquer l'effet de couleur\nconst getSquareColorFilter = (square) => {\n  const centerX = window.innerWidth / 2;\n  const centerY = window.innerHeight / 2;\n\n  // Calculer la distance par rapport au centre de l'écran\n  const distance = Math.sqrt(\n    Math.pow(square.col * gridSize - centerX, 2) + Math.pow(square.row * gridSize - centerY, 2)\n  );\n\n  // Plus la distance est grande, plus la couleur devient foncée\n  const maxDistance = Math.sqrt(Math.pow(centerX, 2) + Math.pow(centerY, 2));\n  const intensity = 1 - (distance / maxDistance); // Intensité entre 0 (loin du centre) et 1 (au centre)\n\n  // Appliquer un filtre de couleur en fonction de la distance\n  return `brightness(${1 + intensity * 0.2})`; // Ajuster la luminosité pour les carrés proches du centre\n};\n\n// Génération des carrés animés\nconst squares = Array.from({ length: 10 }, (_, id) => ({\n  id,\n  row: Math.floor(Math.random() * rows), // Ligne aléatoire\n  col: Math.floor(Math.random() * cols), // Colonne aléatoire\n  delay: Math.random() * 10, // Délai aléatoire entre 0 et 10 secondes\n}));\n</script>\n\n<style>\n/* Arrière-plan principal */\nbody {\n  margin: 0;\n  background-color: #2b2b2b;\n  color: #fff;\n  font-family: Arial, sans-serif;\n  overflow: hidden; /* Empêche les débordements */\n}\n\n#app {\n  position: relative;\n  min-height: 100vh;\n  background-color: #2c2c2c; /* Couleur de fond principale */\n  background-image: \n    linear-gradient(rgba(255, 255, 255, 0.05) 1px, transparent 1px),\n    linear-gradient(to right, rgba(255, 255, 255, 0.05) 1px, transparent 1px);\n  background-size: 50px 50px; /* Taille de la grille */\n}\n\n/* Conteneur pour les carrés animés */\n.animated-squares {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none; /* Empêche les clics sur les carrés */\n}\n\n/* Style des carrés */\n.square {\n  position: absolute;\n  width: 50px;\n  height: 50px;\n  background-color: #2c2c2c; /* Fond initial identique à la grille */\n  animation: fadeInOut 5s infinite; /* Animation */\n  animation-timing-function: ease-in-out; /* Transitions douces */\n}\n\n/* Animation des carrés */\n@keyframes fadeInOut {\n  0% {\n    background-color: #2c2c2c; /* Même couleur que la grille */\n  }\n  50% {\n    background-color: rgba(80, 80, 80, 0.6); /* Gris légèrement plus clair */\n  }\n  100% {\n    background-color: #2c2c2c; /* Retour à la couleur initiale */\n  }\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;EAINC,KAAK,EAAC;AAAkB;;;uBAJ/BC,mBAAA,CAiBM,OAjBNC,UAiBM,GAhBJC,YAAA,CAAeC,sBAAA,GAEfC,mBAAA,2CAA8C,EAC9CC,mBAAA,CAYM,OAZNC,UAYM,I,kBAXJN,mBAAA,CAUOO,SAAA,QAhBbC,WAAA,CAOyBC,MAAA,CAAAC,OAAO,EAAjBC,MAAM;yBADfX,mBAAA,CAUO;MARJY,GAAG,cAAcD,MAAM,CAACb,EAAE;MAC3BC,KAAK,EAAC,QAAQ;MACbc,KAAK,EAVdC,eAAA;gBAUoCH,MAAM,CAACI,GAAG;iBAA8BJ,MAAM,CAACK,GAAG;2BAAwCL,MAAM,CAACM,KAAK;gBAAuBR,MAAA,CAAAS,oBAAoB,CAACP,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}