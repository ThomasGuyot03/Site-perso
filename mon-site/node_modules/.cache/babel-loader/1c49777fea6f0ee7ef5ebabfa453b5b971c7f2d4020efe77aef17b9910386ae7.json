{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  class: \"animated-squares\"\n};\nconst _hoisted_3 = {\n  class: \"moving-points\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_router_view), _createCommentVNode(\" Grille animée avec des carrés alignés \"), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.squares, square => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: 'square-' + square.id,\n      class: \"square\",\n      style: _normalizeStyle({\n        top: `${square.row * 50}px`,\n        left: `${square.col * 50}px`,\n        animationDelay: `${square.delay}s`\n      })\n    }, null, 4 /* STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Points animés avec traînée \"), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.points, point => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: 'point-' + point.id,\n      class: _normalizeClass([\"point\", point.direction]),\n      style: _normalizeStyle({\n        top: `${point.startTop}px`,\n        left: `${point.startLeft}px`,\n        animationDuration: `${point.speed}s`,\n        animationDelay: `${point.delay}s`\n      })\n    }, null, 6 /* CLASS, STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["id","class","_createElementBlock","_hoisted_1","_createVNode","_component_router_view","_createCommentVNode","_createElementVNode","_hoisted_2","_Fragment","_renderList","$setup","squares","square","key","style","_normalizeStyle","row","col","delay","_hoisted_3","points","point","_normalizeClass","direction","startTop","startLeft","speed"],"sources":["C:\\Users\\thoma\\Desktop\\Site pro\\mon-site\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <router-view />\n\n    <!-- Grille animée avec des carrés alignés -->\n    <div class=\"animated-squares\">\n      <div\n        v-for=\"square in squares\"\n        :key=\"'square-' + square.id\"\n        class=\"square\"\n        :style=\"{\n          top: `${square.row * 50}px`,\n          left: `${square.col * 50}px`,\n          animationDelay: `${square.delay}s`\n        }\"\n      ></div>\n    </div>\n\n    <!-- Points animés avec traînée -->\n    <div class=\"moving-points\">\n      <div\n        v-for=\"point in points\"\n        :key=\"'point-' + point.id\"\n        class=\"point\"\n        :class=\"point.direction\"\n        :style=\"{\n          top: `${point.startTop}px`,\n          left: `${point.startLeft}px`,\n          animationDuration: `${point.speed}s`,\n          animationDelay: `${point.delay}s`\n        }\"\n      ></div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nconst gridSize = 50; // Taille des cellules de la grille en pixels\nconst rows = Math.ceil(window.innerHeight / gridSize); // Nombre de lignes\nconst cols = Math.ceil(window.innerWidth / gridSize); // Nombre de colonnes\n\n// Génération des carrés animés\nconst squares = Array.from({ length: 10 }, (_, id) => ({\n  id,\n  row: Math.floor(Math.random() * rows), // Ligne aléatoire\n  col: Math.floor(Math.random() * cols), // Colonne aléatoire\n  delay: Math.random() * 10, // Délai aléatoire entre 0 et 10 secondes\n}));\n\n// Génération des points animés avec traînée\nconst totalPoints = 5; // Total des points animés\nconst usedPositions = { top: [], right: [], bottom: [], left: [] };\n\nconst getUniquePosition = (side) => {\n  let position;\n  do {\n    position = Math.random() * (side === 'top' || side === 'bottom' ? window.innerWidth : window.innerHeight);\n  } while (usedPositions[side].includes(position));\n  usedPositions[side].push(position);\n  return position;\n};\n\nconst points = Array.from({ length: totalPoints }, (_, id) => {\n  const side = ['top', 'right', 'bottom', 'left'][Math.floor(Math.random() * 4)]; // Bord aléatoire\n  const speed = 8 + Math.random() * 5; // Vitesse lente, entre 8 et 13 secondes\n  const delay = Math.random() * 5; // Délai aléatoire entre 0 et 5 secondes\n\n  let startTop = 0;\n  let startLeft = 0;\n\n  if (side === 'top') {\n    startTop = 0;\n    startLeft = getUniquePosition('top'); // Position unique sur le bord supérieur\n  } else if (side === 'right') {\n    startTop = getUniquePosition('right'); // Position unique sur le bord droit\n    startLeft = window.innerWidth;\n  } else if (side === 'bottom') {\n    startTop = window.innerHeight;\n    startLeft = getUniquePosition('bottom'); // Position unique sur le bord inférieur\n  } else if (side === 'left') {\n    startTop = getUniquePosition('left'); // Position unique sur le bord gauche\n    startLeft = 0;\n  }\n\n  return {\n    id,\n    direction: side, // Direction du mouvement\n    startTop,\n    startLeft,\n    speed,\n    delay,\n  };\n});\n</script>\n\n<style>\n/* Arrière-plan principal */\nbody {\n  margin: 0;\n  background-color: #2b2b2b;\n  color: #fff;\n  font-family: Arial, sans-serif;\n  overflow: hidden; /* Empêche les débordements */\n}\n\n#app {\n  position: relative;\n  min-height: 100vh;\n  background-color: #2c2c2c; /* Couleur de fond principale */\n  background-image: \n    linear-gradient(rgba(255, 255, 255, 0.05) 1px, transparent 1px),\n    linear-gradient(to right, rgba(255, 255, 255, 0.05) 1px, transparent 1px);\n  background-size: 50px 50px; /* Taille de la grille */\n}\n\n/* Conteneur pour les carrés animés */\n.animated-squares {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none; /* Empêche les clics sur les carrés */\n}\n\n/* Style des carrés */\n.square {\n  position: absolute;\n  width: 50px;\n  height: 50px;\n  background-color: #2c2c2c; /* Fond initial identique à la grille */\n  animation: fadeInOut 5s infinite; /* Animation */\n  animation-timing-function: ease-in-out; /* Transitions douces */\n}\n\n/* Animation des carrés */\n@keyframes fadeInOut {\n  0% {\n    background-color: #2c2c2c; /* Même couleur que la grille */\n  }\n  50% {\n    background-color: rgba(80, 80, 80, 0.6); /* Gris légèrement plus clair */\n  }\n  100% {\n    background-color: #2c2c2c; /* Retour à la couleur initiale */\n  }\n}\n\n/* Conteneur pour les points animés avec traînée */\n.moving-points {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none; /* Empêche les clics sur les lignes */\n}\n\n/* Style des points (ligne fine) */\n.point {\n  position: absolute;\n  background-color: #5f5f5f; /* Couleur des lignes */\n  animation: createTrail linear infinite;\n  animation-timing-function: ease-out;\n}\n\n/* Animations pour les différentes directions */\n.point.top {\n  animation: moveDown 8s linear infinite, createTrail 8s linear infinite;\n  height: 1px; /* Ligne fine en hauteur */\n  width: 50px; /* Longueur fixe */\n}\n\n.point.right {\n  animation: moveLeft 8s linear infinite, createTrail 8s linear infinite;\n  width: 1px; /* Ligne fine en largeur */\n  height: 50px; /* Longueur fixe */\n}\n\n.point.bottom {\n  animation: moveUp 8s linear infinite, createTrail 8s linear infinite;\n  height: 1px; /* Ligne fine en hauteur */\n  width: 50px; /* Longueur fixe */\n}\n\n.point.left {\n  animation: moveRight 8s linear infinite, createTrail 8s linear infinite;\n  width: 1px; /* Ligne fine en largeur */\n  height: 50px; /* Longueur fixe */\n}\n\n/* Animation de création de traînée */\n@keyframes createTrail {\n  0% {\n    opacity: 1; /* Le point est visible au début */\n  }\n  100% {\n    opacity: 1; /* La ligne reste visible, mais c'est toujours une ligne fine */\n  }\n}\n\n/* Mouvements */\n@keyframes moveDown {\n  from {\n    top: 0;\n  }\n  to {\n    top: 100vh;\n  }\n}\n\n@keyframes moveLeft {\n  from {\n    left: 100vw;\n  }\n  to {\n    left: 0;\n  }\n}\n\n@keyframes moveUp {\n  from {\n    top: 100vh;\n  }\n  to {\n    top: 0;\n  }\n}\n\n@keyframes moveRight {\n  from {\n    left: 0;\n  }\n  to {\n    left: 100vw;\n  }\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;EAINC,KAAK,EAAC;AAAkB;;EAcxBA,KAAK,EAAC;AAAe;;;uBAlB5BC,mBAAA,CAgCM,OAhCNC,UAgCM,GA/BJC,YAAA,CAAeC,sBAAA,GAEfC,mBAAA,2CAA8C,EAC9CC,mBAAA,CAWM,OAXNC,UAWM,I,kBAVJN,mBAAA,CASOO,SAAA,QAfbC,WAAA,CAOyBC,MAAA,CAAAC,OAAO,EAAjBC,MAAM;yBADfX,mBAAA,CASO;MAPJY,GAAG,cAAcD,MAAM,CAACb,EAAE;MAC3BC,KAAK,EAAC,QAAQ;MACbc,KAAK,EAVdC,eAAA;gBAUoCH,MAAM,CAACI,GAAG;iBAA8BJ,MAAM,CAACK,GAAG;2BAAwCL,MAAM,CAACM,KAAK;;;oCAQtIb,mBAAA,gCAAmC,EACnCC,mBAAA,CAaM,OAbNa,UAaM,I,kBAZJlB,mBAAA,CAWOO,SAAA,QA/BbC,WAAA,CAqBwBC,MAAA,CAAAU,MAAM,EAAfC,KAAK;yBADdpB,mBAAA,CAWO;MATJY,GAAG,aAAaQ,KAAK,CAACtB,EAAE;MACzBC,KAAK,EAvBbsB,eAAA,EAuBc,OAAO,EACLD,KAAK,CAACE,SAAS;MACtBT,KAAK,EAzBdC,eAAA;gBAyBoCM,KAAK,CAACG,QAAQ;iBAAyBH,KAAK,CAACI,SAAS;8BAAsCJ,KAAK,CAACK,KAAK;2BAAkCL,KAAK,CAACH,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}